Disabled the update option so it doesn't break the package.
--- a/searchsploit
+++ b/searchsploit
@@ -65,7 +65,7 @@ function usage()
   echo "   -o, --overflow  Exploit title's are allowed to overflow their columns."
   echo "   -p, --path      Show the full path to an exploit (Copies path to clipboard if possible)."
   echo "   -t, --title     Search just the exploit title (Default is title AND the file's path)."
-  echo "   -u, --update    Update exploit database from git."
+#  echo "   -u, --update    Update exploit database from git."
   echo "   -w, --www       Show URLs to Exploit-DB.com rather than local path."
   echo "       --colour    Disable colour highlighting."
   echo "       --id        Display EDB-ID value rather than local path."
@@ -86,43 +86,43 @@ function usage()
 
 
 ## Update database (via GIT)
-function update()
-{
-  ## Make sure we are in the correct folder
-  mkdir -p "${gitpath}/"
-  cd "${gitpath}/"
-
-  ## Are we in a git repo?
-  if [[ "$( git rev-parse --is-inside-work-tree )" != "true" ]]; then
-    if [[ "$( ls )" = "" ]]; then
-      # If directory is empty, just clone
-      echo -e '\n[i] Nothing here. Starting fresh...'
-      git clone "${gitremote}" .
-    fi
-  fi
-
-  # Is our git remote added? (aka homebrew)
-  if [[ "$( git remote -v )" != *"${gitremote}"* ]]; then
-    echo -e '\n[i] Missing git remote:' "${gitremote}"
-    git init >/dev/null
-    git remote add origin "${gitremote}" 2>/dev/null
-  fi
-
-  # Make sure to prep checkout first
-  git checkout -- .
-
-  # Update from git
-  git pull origin master
-
-  # If conflicts, clean and try again
-  if [[ "$?" -ne 0 ]]; then
-    git clean -d -fx ""
-    git pull origin master
-  fi
-
-  echo -e "\n[*] Update finished."
-  exit 6
-}
+#function update()
+#{
+#  ## Make sure we are in the correct folder
+#  mkdir -p "${gitpath}/"
+#  cd "${gitpath}/"
+#
+#  ## Are we in a git repo?
+#  if [[ "$( git rev-parse --is-inside-work-tree )" != "true" ]]; then
+#    if [[ "$( ls )" = "" ]]; then
+#      # If directory is empty, just clone
+#      echo -e '\n[i] Nothing here. Starting fresh...'
+#      git clone "${gitremote}" .
+#    fi
+#  fi
+#
+#  # Is our git remote added? (aka homebrew)
+#  if [[ "$( git remote -v )" != *"${gitremote}"* ]]; then
+#    echo -e '\n[i] Missing git remote:' "${gitremote}"
+#    git init >/dev/null
+#    git remote add origin "${gitremote}" 2>/dev/null
+#  fi
+#
+#  # Make sure to prep checkout first
+#  git checkout -- .
+#
+#  # Update from git
+#  git pull origin master
+#
+#  # If conflicts, clean and try again
+#  if [[ "$?" -ne 0 ]]; then
+#    git clean -d -fx ""
+#    git pull origin master
+#  fi
+#
+#  echo -e "\n[*] Update finished."
+#  exit 6
+#}
 
 
 ## Printing dotted lines in the correct manner
@@ -156,8 +156,8 @@ for param in "$@"; do
     GETPATH=1
   elif [[ "${param}" == "--title" ]]; then
     FILEPATH=0
-  elif [[ "${param}" == "--update" ]]; then
-    update
+  #elif [[ "${param}" == "--update" ]]; then
+  #  update
   elif [[ "${param}" == "--www" ]]; then
     WEBLINK=1
   elif [[ "${param}" == "--colour" ]] || [[ "${param}" == "--color" ]]; then
@@ -187,7 +187,7 @@ while getopts "cehoptuw" arg "${ARGS}";
     o) OVERFLOW=1;;
     p) GETPATH=1;;
     t) FILEPATH=0;;
-    u) update;;
+#    u) update;;
     w) WEBLINK=1;;
   esac
   shift $(( OPTIND - 1 ))
